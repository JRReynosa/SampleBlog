@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@model IEnumerable<Portfolio.ViewModels.BlogViewModel>

@{
    ViewData["Title"] = "Index";
}

<!-- Include the highlight.js library/CSS & Quill library/CSS-->
<link rel="stylesheet"
      href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.0.0/build/styles/monokai-sublime.min.css">
<script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.0.0/build/highlight.min.js"></script>
<link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet">
<script src="//cdn.quilljs.com/1.3.6/quill.js"></script>

<h1>Blog</h1>

@{
    if (SignInManager.IsSignedIn(User))
    {
        <a class="text-info h4" asp-controller="Blogs" asp-action="Create">New Post</a>
    }
}

@for (int i = 0; i < 3; i++)
{
<div class="border-bottom">
    <p class="d-inline display-4">
        @Html.DisplayFor(item => Model.ElementAt(i).Title)
    </p>
    <p class="d-inline text-secondary">
        @Html.DisplayFor(item => Model.ElementAt(i).DateSubmitted)
    </p>
    @if (SignInManager.IsSignedIn(User))
    {
        <a class="d-inline text-info" asp-action="Edit" asp-route-id="@Model.ElementAt(i).BlogID">Edit</a>
        <a class="d-inline text-danger" asp-action="Delete" asp-route-id="@Model.ElementAt(i).BlogID">Delete</a>
    }
    <p class="text-info">
        Tags: @Html.DisplayFor(item => Model.ElementAt(i).Tags)
    </p>
    <!-- Create the editor container -->
    @{
        string str = "editor" + i;
    }
    <div id="@str">
    </div>
</div>
}

<script>
    $(document).ready(function () {
        var Delta = Quill.import('delta'); // Import delta

        // Initialize Quill editors
        @for (var i = 0; i < 3; i++) {
            <text>
            var str = '#editor' + @i;
            var quill = new Quill(str, {
                readOnly: true,
                theme: 'bubble'
            });

            var json = @Html.Raw(Json.Serialize(Model.ElementAt(i).Content.Substring(0))); // Bring in the JSON from Model.Content
            var delta = new Delta(JSON.parse(json)); // Parse JSON and create new Delta from it
            var a = delta.retain(0);
            quill.setContents(a); // Set the contents within the editor based on Delta
            </text>
        }
    });

</script>
